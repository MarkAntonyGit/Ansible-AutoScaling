---
- name: "Creating AWS Auto Scaling Group" 
  hosts: localhost
  vars_files:
    - autoscaling_vars.yml 
  vars_prompt:
    - name: key_name
      prompt: "Enter the desired name for the key file"
      default: "ansible-key"
    - name: sg_name
      prompt: "Enter the desired name for the Security Group"
      default: "ansible-sg"
    - name: instance_type
      prompt: "Enter the desired Instance-Type"
      default: "t2.micro" 
  tasks:

    - name: "Aws - Creating KeyPair"
      ec2_key:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ key_name }}"
        state: present
      register: keypair

    - name: "Aws - Saving KeyPair"
      when: keypair.changed == true
      copy:
        content: "{{ keypair.key.private_key}}"
        dest: "{{ key_name }}.pem"
        mode: 0400

    - name: "Aws - Creating Secutiry Group"
      ec2_group:
        name: "{{ sg_name }}"
        description: "Created By Ansible"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: sgroup

    - name: "Aws - Creating Load Balancer"
      ec2_elb_lb:
        name: Ansible-LB
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        state: present
        connection_draining_timeout: 60
        security_group_names: "{{ sg_name }}"
        cross_az_load_balancing: "yes"
        region: "{{ region }}"
        zones:
          - "{{ zone1 }}"
          - "{{ zone2 }}"       
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
          ping_protocol: http
          ping_port: 80
          ping_path: "/health.html"
          response_timeout: 5
          interval: 10
          unhealthy_threshold: 2
          healthy_threshold: 2
      
    - name: "Aws - Creating Launch Configuration" 
      ec2_lc:
        name: Ansible_LC
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        image_id: "{{ ami }}"
        key_name: "{{ key_name }}"
        region: "{{ region }}"
        security_groups: "{{ sg_name }}"
        instance_type: "{{ instance_type }}"
        assign_public_ip: yes  

    - name: "Aws - Creating Auto Scaling Group" 
      ec2_asg:
        name: Ansible_ASG
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        launch_config_name: Ansible_LC
        load_balancers: Ansible-LB
        health_check_period: 60
        health_check_type: EC2
        replace_all_instances: yes
        min_size: "{{ asg_min }}"
        max_size: "{{ asg_max }}"
        desired_capacity: "{{ asg_desired }}"
        region: "{{ region }}"
        tags: 
          - Name: ASG
          - propagate_at_launch: yes   
      register: asg_status
   
    - name: "AWS - Gather information about instances created with ASG"
      ec2_instance_info:
        region: "{{ region }}"      
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        filters: 
          "tag:Name": ASG
          instance-state-name: [ "running"] 
      register: asg_instance 

    
    - name: "Creating Dynamic Inventory for  ASG Instances"
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: "asg"
        ansible_host: "{{ item.public_ip_address }}"
        ansible_port: 22
        ansible_user: "ec2-user"
        ansible_ssh_private_key_file: "{{ key_name }}.pem" 
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items:
        - "{{ asg_instance.instances }}"

       
- name: "ASG Application"
  hosts: asg 
  become: true 
  serial: 1 
  gather_facts: False
  vars_files:
    - autoscaling_vars.yml  
  tasks:
  
    - name: "EC2 - Installing required packages" 
      yum: 
        name: 
          - httpd
          - git
          - php  
        state: present 

    - name: "EC2 - Cloning Git Application"
      git: 
        repo: "{{ git_url }}"
        dest: /var/Git
      register: git_status

    - name: "EC2 - Disabling Health Check"
      when: git_status.changed == true
      file: 
        path: /var/www/html/health.html
        state: touch 
        mode: 0000

    - name: "EC2 - Off loading from Load Balancer" 
      when: git_status.changed == true
      pause:
        seconds: "{{ health_time }}"   

    - name: "EC2 - Updating Application"
      when: git_status.changed == true
      copy:
        src: /var/Git/
        dest: /var/www/html/
        owner: apache
        group: apache
        remote_src: true
            
    - name: "EC2 - Application Updation - Enabling Health Check"
      when: git_status.changed == true
      file:
        path: /var/www/html/health.html
        state: touch
        mode: 0444

    - name: "EC2 - Restart httpd" 
      service:
        name: httpd
        state: restarted         
            
    - name: "EC2 - Application Updation - Loading EC2 To ELB"
      when: git_status.changed == true
      pause:
        seconds: "{{ health_time }}" 
